import cv2
import numpy as np

# Define the color range for detecting yellow in HSV space
# Yellow color in HSV: H in [20, 40], S in [100, 255], V in [100, 255]
lower_yellow = np.array([20, 100, 100])
upper_yellow = np.array([40, 255, 255])

def find_angle_of_prism(image):
    # Convert the image to HSV space
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

    # Create a mask for yellow color
    mask = cv2.inRange(hsv, lower_yellow, upper_yellow)

    # Find contours in the mask
    contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Loop over the contours and look for a rectangular prism
    for contour in contours:
        # Approximate the contour to a polygon with fewer vertices
        epsilon = 0.02 * cv2.arcLength(contour, True)
        approx = cv2.approxPolyDP(contour, epsilon, True)

        # If the polygon has 4 vertices, it's likely a rectangle
        if len(approx) == 4:
            # Draw the contour and the bounding box for visual feedback
            cv2.drawContours(image, [approx], -1, (0, 255, 0), 2)

            # Get the rotated rectangle and its angle
            rect = cv2.minAreaRect(approx)
            box = cv2.boxPoints(rect)  # Get the 4 points of the rectangle
            box = np.int0(box)  # Convert to integer

            # Draw the rotated rectangle for visual feedback
            cv2.polylines(image, [box], True, (0, 0, 255), 2)

            # Get the angle of the rectangle (relative to the horizontal axis)
            angle = rect[2]

            # If the angle is negative (rotated clockwise), we convert it to positive for consistency
            if angle < -45:
                angle += 90

            # Return the angle of the rectangular prism
            return angle

    # If no rectangle is found, return None
    return None

# Main function to capture the video feed and process the frames
def main():
    # Initialize the video capture (0 is the default camera)
    cap = cv2.VideoCapture(0)

    while True:
        ret, frame = cap.read()

        if not ret:
            print("Failed to capture image")
            break

        # Find the angle of the yellow rectangular prism
        angle = find_angle_of_prism(frame)

        # Display the angle on the image
        if angle is not None:
            cv2.putText(frame, f"Angle: {angle:.2f} degrees", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 0), 2)

        # Show the image with the detected object and angle
        cv2.imshow("Image", frame)

        # Break the loop if the 'q' key is pressed
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Release the camera and close all OpenCV windows
    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
