import cv2
import numpy as np

# This function is called every frame by Limelight's backend
def runPipeline(image, llrobot):
    # Convert the image to HSV color space for easier color thresholding
    hsv_img = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

    # Define HSV range for red color (two ranges due to HSV wrapping)
    lower_red1 = np.array([0, 120, 70])
    upper_red1 = np.array([10, 255, 255])

    lower_red2 = np.array([170, 120, 70])
    upper_red2 = np.array([180, 255, 255])

    # Create binary masks for red color
    mask1 = cv2.inRange(hsv_img, lower_red1, upper_red1)
    mask2 = cv2.inRange(hsv_img, lower_red2, upper_red2)

    # Combine both masks to get the final mask
    mask = cv2.bitwise_or(mask1, mask2)

    # Find contours in the binary image
    contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Initialize variables for the largest detected rectangle
    largest_contour = None
    angle = 0

    # If contours are found, process the largest one
    if contours:
        # Find the largest contour based on area
        largest_contour = max(contours, key=cv2.contourArea)

        # Get the bounding box around the contour
        x, y, w, h = cv2.boundingRect(largest_contour)

        # Calculate the angle of the rectangle using the width and height
        dx = w  # width difference
        dy = h  # height difference

        # Calculate the angle using atan2, and convert it to degrees
        angle = np.degrees(np.arctan2(dy, dx))

        # Draw the bounding box on the image
        cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)

        # Display the angle on the image
        cv2.putText(image, f"Angle: {angle:.2f} degrees", (10, 30),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 0, 0), 2)

    # Prepare output data for the robot
    llpython = [angle]  # Output the angle to the robot

    # Return the contour, the modified image, and the output data
    return largest_contour, image, llpython
